{"version":3,"sources":["components/Header.js","components/QueuedSongList.js","graphQL/queries.js","components/SongPlayer.js","graphQL/subscriptions.js","components/SongList.js","graphQL/mutations.js","components/AddSong.js","reducer.js","App.js","theme.js","graphQL/client.js","index.js"],"names":["makeStyles","theme","title","marginLeft","spacing","Header","useStyles","avatar","width","height","text","textOverflow","overflow","container","display","gridAutoFlow","gridTemplateColumns","gridGap","alignItems","marginTop","songInfoContainer","whiteSpace","QueuedSong","song","artist","thumbnail","classes","className","Avatar","src","Typography","variant","color","IconButton","Delete","QueuedSongList","queue","console","log","greaterThanMd","useMediaQuery","breakpoints","up","style","margin","Array","from","length","map","i","key","GET_QUEUED_SONGS","gql","justifyContent","details","flexDirection","padding","content","flex","controls","paddingLeft","paddingRight","playIcon","SongPlayer","data","useQuery","useContext","SongContext","state","dispatch","Card","CardContent","component","SkipPrevious","onClick","isPlaying","type","Pause","PlayArrow","SkipNext","Slider","min","max","step","CardMedia","image","GET_SONGS","songInfo","objectFit","Song","id","useState","currentSongPlaying","setCurrentSongPlaying","useEffect","isSongPlaying","gutterBottom","CardActions","payload","size","Save","SongList","useSubscription","loading","error","CircularProgress","songs","ADD_SONG","urLInput","addSongButton","dialog","textAlign","DEFAULT_SONG","duration","AddSong","url","setUrl","useMutation","addSong","playable","setPlayable","setDialog","setSong","handleCloseDialog","a","player","nestedPlayer","getVideoData","songData","getYouTubeInfo","getCurrentSound","getSoundCloudInfo","getDuration","video_id","author","Promise","resolve","Number","user","username","artwork_url","replace","variables","handleError","field","graphQLErrors","extensions","path","includes","handleChangeSong","e","target","name","value","prevSong","isPlayable","SoundcloudPlayer","canPlay","YoutubePlayer","Dialog","open","onClose","DialogTitle","DialogContent","alt","TextField","onChange","label","fullWidth","helperText","DialogActions","Button","placeholder","InputProps","startAdornment","InputAdornment","position","Link","disabled","preventDefault","endIcon","AddBoxOutlined","hidden","onReady","songReducer","action","React","createContext","displayName","App","initialSongState","useReducer","greaterThanSM","Provider","Grid","paddingTop","item","xs","md","top","right","left","bottom","createMuiTheme","palette","primary","teal","secondary","purple","client","ApolloClient","link","WebSocketLink","uri","options","reconnect","cache","InMemoryCache","typeDefs","writeQuery","query","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"mQAUkBA,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CAEHC,WAAYF,EAAMG,QAAQ,QAoBnBC,I,oCCPf,IAAMC,EAAYN,YAAW,CACzBO,OAAQ,CACJC,MAAO,GACPC,OAAQ,IAEZC,KAAM,CACFC,aAAc,WACdC,SAAU,UAEdC,UAAW,CACPC,QAAS,OACTC,aAAc,SACdC,oBAAqB,iBACrBC,QAAS,GACTC,WAAY,SACZC,UAAW,IAEfC,kBAAmB,CACfR,SAAU,SACVS,WAAY,YAIpB,SAASC,EAAT,GAA+B,IAATC,EAAQ,EAARA,KACVrB,EAA6BqB,EAA7BrB,MAAOsB,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,UACjBC,EAAUpB,IAEhB,OACI,yBAAKqB,UAAWD,EAAQb,WACpB,kBAACe,EAAA,EAAD,CAAQC,IAAKJ,EAAWE,UAAWD,EAAQnB,SAC3C,yBAAKoB,UAAWD,EAAQN,mBACpB,kBAACU,EAAA,EAAD,CAAYH,UAAWD,EAAQhB,KAAMqB,QAAQ,aACxC7B,GAEL,kBAAC4B,EAAA,EAAD,CAAYH,UAAWD,EAAQhB,KAAMsB,MAAM,gBAAgBD,QAAQ,SAC9DP,IAGT,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQF,MAAM,YAOfG,MApEf,YAAoC,IAAVC,EAAS,EAATA,MACtBC,QAAQC,IAAIF,GACZ,IAAMG,EAAgBC,aAAc,SAAAvC,GAAK,OAAIA,EAAMwC,YAAYC,GAAG,SAE5DnB,EAAO,CACTrB,MAAO,OACPsB,OAAQ,OACRC,UAAW,wCAGf,OAAOc,GACH,yBAAKI,MAAO,CAAEC,OAAQ,WAClB,kBAACd,EAAA,EAAD,CAAYE,MAAM,gBAAgBD,QAAQ,UAA1C,aAGCc,MAAMC,KAAK,CAAEC,OAAQ,IAAK,kBAAMxB,KAAMyB,KAAI,SAACzB,EAAM0B,GAAP,OACvC,kBAAC3B,EAAD,CAAY4B,IAAKD,EAAG1B,KAAMA,S,mTCfnC,IAAM4B,EAAmBC,cAAH,KCGvB9C,EAAYN,aAAW,SAAAC,GAAK,MAAK,CACnCY,UAAW,CACPC,QAAS,OACTuC,eAAgB,iBAEpBC,QAAS,CACLxC,QAAS,OACTyC,cAAe,SACfC,QAAS,YAEbC,QAAS,CACLC,KAAM,YAEVjC,UAAW,CACPjB,MAAO,KAEXmD,SAAU,CACN7C,QAAS,OACTI,WAAY,SACZ0C,YAAa3D,EAAMG,QAAQ,GAC3ByD,aAAc5D,EAAMG,QAAQ,IAEhC0D,SAAU,CACNrD,OAAQ,GACRD,MAAO,QA2DAuD,MAvDf,WAAuB,IACXC,EAASC,mBAASd,GAAlBa,KADU,EAEUE,qBAAWC,IAA/BC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,SACT3C,EAAUpB,IAQhB,OACI,oCACI,kBAACgE,EAAA,EAAD,CAAMvC,QAAQ,WAAWJ,UAAWD,EAAQb,WACxC,yBAAKc,UAAWD,EAAQ4B,SACpB,kBAACiB,EAAA,EAAD,CAAa5C,UAAWD,EAAQ+B,SAC5B,kBAAC3B,EAAA,EAAD,CAAYC,QAAQ,KAAKyC,UAAU,MAC9BJ,EAAM7C,KAAKrB,OAEhB,kBAAC4B,EAAA,EAAD,CAAYC,QAAQ,YAAYyC,UAAU,IAAIxC,MAAM,iBAC/CoC,EAAM7C,KAAKrB,QAGpB,yBAAKyB,UAAWD,EAAQiC,UACpB,kBAAC1B,EAAA,EAAD,KACI,kBAACwC,EAAA,EAAD,OAEJ,kBAACxC,EAAA,EAAD,CAAYyC,QArBhC,WAEIL,EAASD,EAAMO,UAAY,CAAEC,KAAM,cAAiB,CAAEA,KAAM,gBAqBvCR,EAAMO,UAAY,kBAACE,EAAA,EAAD,CAAOlD,UAAWD,EAAQoC,WAAe,kBAACgB,EAAA,EAAD,CAAWnD,UAAWD,EAAQoC,YAE9F,kBAAC7B,EAAA,EAAD,KACI,kBAAC8C,EAAA,EAAD,OAEJ,kBAACjD,EAAA,EAAD,CAAYC,QAAQ,YAAYyC,UAAU,IAAIxC,MAAM,iBAApD,aAIJ,kBAACgD,EAAA,EAAD,CACIJ,KAAK,QACLK,IAAK,EACLC,IAAK,EACLC,KAAM,OAGd,kBAACC,EAAA,EAAD,CACIzD,UAAWD,EAAQD,UACnB4D,MAAOjB,EAAM7C,KAAKE,aAG1B,kBAAC,EAAD,CAAgBW,MAAO4B,EAAK5B,U,8QCnFjC,IAAMkD,EAAYlC,cAAH,KCgCtB,IAAM9C,EAAYN,aAAW,SAAAC,GAAK,MAAK,CACnCY,UAAW,CACP+B,OAAQ3C,EAAMG,WAElBgB,kBAAmB,CACfN,QAAS,OACTI,WAAY,UAEhBqE,SAAU,CACN/E,MAAO,OACPM,QAAS,OACTuC,eAAgB,iBAEpB5B,UAAW,CACP+D,UAAW,QACXhF,MAAO,IACPC,OAAQ,SAIhB,SAASgF,EAAT,GAAyB,IAATlE,EAAQ,EAARA,KACJrB,EAAiCqB,EAAjCrB,MAAOsB,EAA0BD,EAA1BC,OAAQC,EAAkBF,EAAlBE,UAAWiE,EAAOnE,EAAPmE,GADd,EAEgCC,oBAAS,GAFzC,mBAEbC,EAFa,KAEOC,EAFP,OAGQ3B,qBAAWC,IAA/BC,EAHY,EAGZA,MAAOC,EAHK,EAGLA,SAEfyB,qBAAU,WACN,IAAMC,EAAgB3B,EAAMO,WAAae,IAAOtB,EAAM7C,KAAKmE,GAC3DG,EAAsBE,KACvB,CAACL,EAAItB,EAAMO,UAAWP,EAAM7C,KAAKmE,KAEpC,IAAMhE,EAAUpB,IAQhB,OACI,kBAACgE,EAAA,EAAD,CAAM3C,UAAWD,EAAQb,WACrB,yBAAKc,UAAWD,EAAQN,mBACpB,kBAACgE,EAAA,EAAD,CAAWzD,UAAWD,EAAQD,UAAW4D,MAAO5D,IAChD,yBAAKE,UAAWD,EAAQ6D,UACpB,kBAAChB,EAAA,EAAD,KACI,kBAACzC,EAAA,EAAD,CAAYkE,cAAY,EAACjE,QAAQ,KAAKyC,UAAU,MAC3CtE,GAEL,kBAAC4B,EAAA,EAAD,CAAYC,QAAQ,QAAQyC,UAAU,IAAIxC,MAAM,iBAC3CR,IAGT,kBAACyE,EAAA,EAAD,KACI,kBAAChE,EAAA,EAAD,CAAYyC,QApBhC,WACIL,EAAS,CAAEO,KAAM,WAAYsB,QAAS,CAAE3E,UAExC8C,EAASD,EAAMO,UAAY,CAAEC,KAAM,cAAiB,CAAEA,KAAM,eAiBLuB,KAAK,QAAQnE,MAAM,WACrD4D,EAAqB,kBAACf,EAAA,EAAD,MAAY,kBAACC,EAAA,EAAD,OAEtC,kBAAC7C,EAAA,EAAD,CAAYkE,KAAK,QAAQnE,MAAM,aAC3B,kBAACoE,EAAA,EAAD,CAAMpE,MAAM,mBASzBqE,MA7Ff,WAAoB,MAIiBC,0BAAgBhB,GAAzCtB,EAJQ,EAIRA,KAAMuC,EAJE,EAIFA,QAASC,EAJP,EAIOA,MAIvB,OAAID,EAEI,yBAAK5D,MAAO,CACR7B,QAAS,OACTyC,cAAe,SACfrC,WAAY,SACZC,UAAW,KAEX,kBAACsF,EAAA,EAAD,OAKRD,EAAc,qDAEX,6BAAMxC,EAAK0C,MAAM1D,KAAI,SAAAzB,GAAI,OAC5B,kBAACkE,EAAD,CAAMvC,IAAK3B,EAAKmE,GAAInE,KAAMA,S,mgBC5BlC,IAQeoF,GAREvD,cAAH,MCkBR9C,GAAYN,aAAW,SAAAC,GAAK,MAAK,CACnCY,UAAW,CACPC,QAAS,OACTI,WAAY,UAEhB0F,SAAU,CACNhE,OAAQ3C,EAAMG,QAAQ,IAE1ByG,cAAe,CACXjE,OAAQ3C,EAAMG,QAAQ,IAE1B0G,OAAQ,CACJC,UAAW,UAEftF,UAAW,CACPjB,MAAO,WAKTwG,GAAe,CACjBC,SAAU,EACV/G,MAAO,GACPsB,OAAQ,GACRC,UAAW,IA0NAyF,OAvNf,WAAoB,IAAD,EACOvB,mBAAS,IADhB,mBACRwB,EADQ,KACHC,EADG,OAGcC,sBAAYV,IAH1B,mBAGRW,EAHQ,KAGGd,EAHH,KAGGA,MAHH,EAIiBb,oBAAS,GAJ1B,mBAIR4B,EAJQ,KAIEC,EAJF,KAKT9F,EAAUpB,KALD,EAMaqF,oBAAS,GANtB,mBAMRmB,EANQ,KAMAW,EANA,OAOS9B,mBAASqB,IAPlB,mBAORzF,EAPQ,KAOFmG,EAPE,KA8Bf,SAASC,IACLF,GAAU,GA/BC,4CAkCf,iCAAAG,EAAA,yDAAgCC,EAAhC,EAAgCA,SACtBC,EAAeD,EAAOA,OAAOA,QAGlBE,aAJrB,gBAKQC,EAAWC,EAAeH,GALlC,2BAMeA,EAAaI,gBAN5B,iCAOyBC,EAAkBL,GAP3C,OAOQE,EAPR,eAUIN,EAAQ,2BAAKM,GAAN,IAAgBb,SAV3B,6CAlCe,sBAgDf,SAASc,EAAeJ,GACpB,IAAMZ,EAAWY,EAAOO,cADI,EAEQP,EAAOE,eAAnC7H,EAFoB,EAEpBA,MAAOmI,EAFa,EAEbA,SAGf,MAAO,CACHpB,WACA/G,QACAsB,OARwB,EAEH8G,OAOrB7G,UANW,oCAAgC4G,EAAhC,WAUnB,SAASF,EAAkBN,GACvB,OAAO,IAAIU,SAAQ,SAAAC,GACfX,EAAOK,iBAAgB,SAAAF,GACfA,GACAQ,EAAQ,CACJvB,SAAUwB,OAAOT,EAASf,SAAW,KACrC/G,MAAO8H,EAAS9H,MAChBsB,OAAQwG,EAASU,KAAKC,SACtBlH,UAAWuG,EAASY,YAAYC,QAAQ,SAAU,qBArEvD,4CA4Ef,oCAAAjB,EAAA,sEAGgBT,EAA4C5F,EAA5C4F,IAAKF,EAAuC1F,EAAvC0F,SAAU/G,EAA6BqB,EAA7BrB,MAAOsB,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,UAH9C,SAKc6F,EAAQ,CACVwB,UAAW,CACP3B,IAAKA,EAAIpE,OAAS,EAAIoE,EAAM,KAC5BjH,MAAOA,EAAM6C,OAAS,EAAI7C,EAAQ,KAClCsB,OAAQA,EAAOuB,OAAS,EAAIvB,EAAS,KACrCC,UAAWA,EAAUsB,OAAS,EAAItB,EAAY,KAC9CwF,SAAUA,EAAW,EAAIA,EAAW,QAXpD,OAkBQU,IACAD,EAAQV,IACRI,EAAO,IApBf,gDAsBQ/E,QAAQmE,MAAM,oBAAd,MAtBR,0DA5Ee,sBA0Gf,SAASuC,EAAYC,GAAO,IAAD,IAGvB,cAAOxC,QAAP,IAAOA,GAAP,UAAOA,EAAOyC,cAAc,UAA5B,iBAAO,EAAyBC,kBAAhC,aAAO,EAAqCC,KAAKC,SAASJ,GAG9D,SAASK,EAAiBC,GAAI,IAAD,EACDA,EAAEC,OAAlBC,EADiB,EACjBA,KAAMC,EADW,EACXA,MACd/B,GAAQ,SAAAgC,GAAQ,kCACTA,GADS,kBAEXF,EAAOC,OAxGhB3D,qBAAU,WACN,IAAM6D,EAAaC,KAAiBC,QAAQ1C,IAAQ2C,KAAcD,QAAQ1C,GAE1EK,EAAYmC,KACb,CAACxC,IAhBW,IAwHPjH,EAA6BqB,EAA7BrB,MAAOsB,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,UAEvB,OACI,yBAAKE,UAAWD,EAAQb,WACpB,kBAACkJ,EAAA,EAAD,CACIpI,UAAWD,EAAQoF,OACnBkD,KAAMlD,EACNmD,QAAStC,GAET,kBAACuC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,KACI,yBACItI,IAAKJ,EACL2I,IAAI,iBACJzI,UAAWD,EAAQD,YAEvB,kBAAC4I,EAAA,EAAD,CACIC,SAAUjB,EACVzG,OAAO,QACP4G,KAAK,QACLe,MAAM,QACNd,MAAOvJ,EACPsK,WAAS,EACThE,MAAOuC,EAAY,SACnB0B,WAAY1B,EAAY,UAAY,mBAExC,kBAACsB,EAAA,EAAD,CACIC,SAAUjB,EACVzG,OAAO,QACP4G,KAAK,SACLe,MAAM,SACNd,MAAOjI,EACPgJ,WAAS,EACThE,MAAOuC,EAAY,UACnB0B,WAAY1B,EAAY,WAAa,mBAEzC,kBAACsB,EAAA,EAAD,CACIC,SAAUjB,EACVzG,OAAO,QACP4G,KAAK,YACLe,MAAM,YACNd,MAAOhI,EACP+I,WAAS,EACThE,MAAOuC,EAAY,aACnB0B,WAAY1B,EAAY,cAAgB,oBAGhD,kBAAC2B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIjG,QAASiD,EACT3F,MAAM,aAFV,UAMA,kBAAC2I,EAAA,EAAD,CACI5I,QAAQ,WACRC,MAAM,UACN0C,QAjLL,4CA8KC,cASR,kBAAC2F,EAAA,EAAD,CACI1I,UAAWD,EAAQkF,SACnB0D,SAhKZ,SAAyBhB,GACrBlC,EAAOkC,EAAEC,OAAOE,QAgKRA,MAAOtC,EACPyD,YAAY,gCACZJ,WAAS,EACT5H,OAAO,SACPgC,KAAK,MACLiG,WAAY,CACRC,eACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SACrB,kBAACC,EAAA,EAAD,UAKhB,kBAACN,EAAA,EAAD,CAEIO,UAAW3D,EACX5F,UAAWD,EAAQmF,cACnBnC,QAvLZ,SAAsB4E,GAClBA,EAAE6B,iBACF1D,GAAU,IAsLF1F,QAAQ,YACRC,MAAM,UACNoJ,QAAS,kBAACC,EAAA,EAAD,OAPb,OAWA,kBAAC,KAAD,CAAalE,IAAKA,EAAKmE,QAAM,EAACC,QAlNvB,gD,UC/BJC,OAjBf,SAAqBpH,EAAOqH,GACxB,OAAQA,EAAO7G,MACX,IAAK,YACD,OAAO,2BAAKR,GAAZ,IAAmBO,WAAW,IAClC,IAAK,aACD,OAAO,2BAAKP,GAAZ,IAAmBO,WAAW,IAClC,IAAK,WACD,OAAO,2BACAP,GADP,IAGI7C,KAAMkK,EAAOvF,QAAQ3E,OAE7B,QACI,OAAO6C,ICDND,GAAcuH,IAAMC,cAAc,CAC7CpK,KAAM,CACJmE,GAAI,uCACJxF,MAAO,OACPsB,OAAQ,OACRC,UAAW,uCACXwF,SAAU,IACVE,IAAK,+DAEPxC,WAAW,IAGbR,GAAYyH,YAAc,cA6DXC,OA1Df,WAEE,IAAMC,EAAmBJ,IAAMxH,WAAWC,IAF7B,EAIauH,IAAMK,WAAWP,GAAaM,GAJ3C,mBAIN1H,EAJM,KAICC,EAJD,KAWP2H,EAAgBxJ,aAAc,SAAAvC,GAAK,OAAIA,EAAMwC,YAAYC,GAAG,SAE5DH,EAAgBC,aAAc,SAAAvC,GAAK,OAAIA,EAAMwC,YAAYC,GAAG,SAGlE,OACE,kBAACyB,GAAY8H,SAAb,CAAsBxC,MAAO,CAAErF,QAAOC,aAIpC,kBAAC6H,GAAA,EAAD,CAAMrL,WAAS,EAACT,QAAS,GACvB,kBAAC8L,GAAA,EAAD,CAAMvJ,MACJ,CACEwJ,WAAYH,EAAgB,GAAK,IAEnCI,MAAI,EAACC,GAAI,GAAIC,GAAI,GACjB,kBAAC,GAAD,MACA,kBAAC,EAAD,OAEF,kBAACJ,GAAA,EAAD,CACEvJ,MACEJ,EAEE,CACEyI,SAAU,QACVxK,MAAO,OACP+L,IAAK,GACLC,MAAO,GAEP,CACAxB,SAAU,QACVxK,MAAO,OACPiM,KAAM,EACNC,OAAQ,GAGdN,MAAI,EACJC,GAAI,GACJC,GAAI,GACJ,kBAAC,EAAD,U,kDC9DKrM,GATD0M,aAAe,CACzBC,QAAS,CAELhI,KAAM,OACNiI,QAASC,KACTC,UAAWC,Q,isBCFnB,IAAMC,GAAS,IAAIC,eAAa,CAC5BC,KAAM,IAAIC,KAAc,CAEpBC,IAAK,kDACLC,QAAS,CACLC,WAAW,KAGnBC,MAAO,IAAIC,gBACXC,SAAUtK,cAAF,QA8BZ6J,GAAOU,WAAW,CACdC,MAAOxK,cAAF,MAKLY,KAAM,CACF5B,MAAO,MAWA6K,UCzDfY,IAASC,OACP,kBAAC,iBAAD,CAAgBb,OAAQA,IACtB,kBAAC,IAAMc,WAAP,KACE,kBAAC,KAAD,CAAkB9N,MAAOA,IAEvB,kBAAC+N,GAAA,EAAD,MACA,kBAAC,GAAD,SAKNC,SAASC,eAAe,W","file":"static/js/main.37228aa8.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography, makeStyles } from '@material-ui/core';\nimport HeadsetTwoToneIcon from '@material-ui/icons/HeadsetTwoTone';\n\n// Material UI allows to make a custom hook for each of our components, it will make it easy to pass own custom styles throughout the app\n\n//makestyles function - holds all of the individual styles that I have for each part of the component\n\n\n// Accepts an object\nconst useStyles = makeStyles(theme => ({\n    title: {\n        // marginLeft: '8px',\n        marginLeft: theme.spacing(2),\n    }\n}));\n\nfunction Header() {\n    const classes = useStyles();\n\n    return (\n        // Header now has a primary color of teal comes from theme file\n        <AppBar color=\"primary\" position='fixed'>\n            <Toolbar>\n                <HeadsetTwoToneIcon />\n                <Typography className={classes.title} variant=\"h6\" component=\"h1\">\n                    Apollo Music Share\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Typography, Avatar, IconButton, makeStyles, useMediaQuery } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\nfunction QueuedSongList({ queue }) {\n    console.log(queue);\n    const greaterThanMd = useMediaQuery(theme => theme.breakpoints.up('md'));\n\n    const song = {\n        title: \"LUNE\",\n        artist: \"MOON\",\n        thumbnail: \"https://picsum.photos/id/237/100/100\"\n    }\n\n    return greaterThanMd && (\n        <div style={{ margin: '10px 0' }}>\n            <Typography color=\"textSecondary\" variant=\"button\">\n                QUEUE (5)\n            </Typography>\n            {Array.from({ length: 5 }, () => song).map((song, i) => (\n                <QueuedSong key={i} song={song} />\n            ))}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 44,\n        height: 44,\n    },\n    text: {\n        textOverflow: 'ellipsis',\n        overflow: 'hidden'\n    },\n    container: {\n        display: 'grid',\n        gridAutoFlow: 'column',\n        gridTemplateColumns: '50px auto 50px',\n        gridGap: 12,\n        alignItems: 'center',\n        marginTop: 10\n    },\n    songInfoContainer: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n    }\n})\n\nfunction QueuedSong({ song }) {\n    const { title, artist, thumbnail } = song;\n    const classes = useStyles();\n\n    return (\n        <div className={classes.container}>\n            <Avatar src={thumbnail} className={classes.avatar} />\n            <div className={classes.songInfoContainer}>\n                <Typography className={classes.text} variant=\"subtitle2\">\n                    {title}\n                </Typography>\n                <Typography className={classes.text} color=\"textSecondary\" variant=\"body2\">\n                    {artist}\n                </Typography>\n            </div>\n            <IconButton>\n                <Delete color=\"error\" />\n            </IconButton>\n        </div>\n    );\n\n}\n\nexport default QueuedSongList;\n","import { gql } from '@apollo/client';\n\n// @client annotation tells apollo to perform this query only on client\n\n\nexport const GET_QUEUED_SONGS = gql`\nquery getQueuedSongs {\n    queue @client {\n        id\n        duration\n        title\n        artist\n        thumbnail\n        url\n    }\n}\n`;","import React, { useContext } from 'react';\nimport QueuedSongList from './QueuedSongList';\nimport { Card, CardContent, Typography, IconButton, Slider, CardMedia, makeStyles } from '@material-ui/core';\nimport { SkipPrevious, PlayArrow, SkipNext, Pause } from '@material-ui/icons';\nimport { SongContext } from '../App';\nimport { useQuery } from '@apollo/client';\nimport { GET_QUEUED_SONGS } from '../graphQL/queries';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    details: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '0px 15px',\n    },\n    content: {\n        flex: '1 0 auto',\n    },\n    thumbnail: {\n        width: 150,\n    },\n    controls: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1)\n    },\n    playIcon: {\n        height: 38,\n        width: 38\n    }\n}))\n\nfunction SongPlayer() {\n    const { data } = useQuery(GET_QUEUED_SONGS);\n    const { state, dispatch } = useContext(SongContext);\n    const classes = useStyles();\n\n\n    function handleTogglePlay() {\n        // Toggle state\n        dispatch(state.isPlaying ? { type: \"PAUSE_SONG\" } : { type: \"PLAY_SONG\" })\n    }\n\n    return (\n        <>\n            <Card variant=\"outlined\" className={classes.container}>\n                <div className={classes.details}>\n                    <CardContent className={classes.content}>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            {state.song.title}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\">\n                            {state.song.title}\n                        </Typography>\n                    </CardContent>\n                    <div className={classes.controls}>\n                        <IconButton>\n                            <SkipPrevious />\n                        </IconButton>\n                        <IconButton onClick={handleTogglePlay}>\n                            {/* Toggle icons */}\n                            {state.isPlaying ? <Pause className={classes.playIcon} /> : <PlayArrow className={classes.playIcon} />}\n                        </IconButton>\n                        <IconButton>\n                            <SkipNext />\n                        </IconButton>\n                        <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\">\n                            00:01:30\n                        </Typography>\n                    </div>\n                    <Slider\n                        type=\"range\"\n                        min={0}\n                        max={1}\n                        step={0.01}\n                    />\n                </div>\n                <CardMedia\n                    className={classes.thumbnail}\n                    image={state.song.thumbnail}\n                />\n            </Card>\n            <QueuedSongList queue={data.queue} />\n        </>\n    )\n}\n\nexport default SongPlayer;","import { gql } from '@apollo/client';\n// All graphQL queries live here\n\nexport const GET_SONGS = gql`\nsubscription getSongs {\n    songs(order_by: {created_at: desc}){\n        artist\n        duration\n        id\n        thumbnail\n        title\n        url\n    }\n  }\n`;\n\n","import React, { useContext, useEffect, useState } from 'react';\nimport { CircularProgress, Card, CardMedia, CardContent, Typography, CardActions, IconButton, makeStyles } from '@material-ui/core';\nimport { PlayArrow, Save, Pause } from '@material-ui/icons';\nimport { useSubscription } from '@apollo/client';\nimport { GET_SONGS } from '../graphQL/subscriptions';\nimport { SongContext } from '../App';\n\nfunction SongList() {\n    // Remove loading variable instead use hook useQuery\n    // let loading = false;\n\n    const { data, loading, error } = useSubscription(GET_SONGS);\n\n\n    // If true show loading spinner\n    if (loading) {\n        return (\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                marginTop: 50\n            }}>\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (error) return <div>Error fetching songs</div>\n\n    return <div>{data.songs.map(song => (\n        <Song key={song.id} song={song} />\n    ))}</div>;\n}\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        margin: theme.spacing()\n    },\n    songInfoContainer: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    songInfo: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    thumbnail: {\n        objectFit: 'cover',\n        width: 140,\n        height: 140\n    }\n}))\n\nfunction Song({ song }) {\n    const { title, artist, thumbnail, id } = song;\n    const [currentSongPlaying, setCurrentSongPlaying] = useState(false);\n    const { state, dispatch } = useContext(SongContext);\n\n    useEffect(() => {\n        const isSongPlaying = state.isPlaying && id === state.song.id;\n        setCurrentSongPlaying(isSongPlaying);\n    }, [id, state.isPlaying, state.song.id])\n\n    const classes = useStyles();\n\n    function handleTogglePlay() {\n        dispatch({ type: \"SET_SONG\", payload: { song } })\n\n        dispatch(state.isPlaying ? { type: \"PAUSE_SONG\" } : { type: \"PLAY_SONG\" })\n    }\n\n    return (\n        <Card className={classes.container}>\n            <div className={classes.songInfoContainer}>\n                <CardMedia className={classes.thumbnail} image={thumbnail} />\n                <div className={classes.songInfo}>\n                    <CardContent >\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {title}\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n                            {artist}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <IconButton onClick={handleTogglePlay} size=\"small\" color=\"primary\">\n                            {currentSongPlaying ? <Pause /> : <PlayArrow />}\n                        </IconButton>\n                        <IconButton size=\"small\" color=\"secondary\">\n                            <Save color=\"secondary\" />\n                        </IconButton>\n                    </CardActions>\n                </div>\n            </div>\n        </Card>\n    )\n}\n\nexport default SongList;","import { gql } from '@apollo/client';\n\n\nconst ADD_SONG = gql`\nmutation addSong($title: String!, $artist: String!, $thumbnail: String!, $duration: Float!, $url: String!) {\n    insert_songs(objects: {url: $url, title: $title, thumbnail: $thumbnail, duration: $duration, artist: $artist}) {\n      affected_rows\n    }\n  }\n`;\n\nexport default ADD_SONG;","import React, { useState, useEffect } from 'react';\nimport QueuedSongList from './QueuedSongList';\nimport {\n    TextField,\n    InputAdornment,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    makeStyles,\n    duration\n} from '@material-ui/core';\nimport { Link, AddBoxOutlined } from '@material-ui/icons';\nimport SoundcloudPlayer from 'react-player/lib/players/SoundCloud';\nimport YoutubePlayer from 'react-player/lib/players/YouTube';\nimport ReactPlayer from 'react-player';\nimport ADD_SONG from '../graphQL/mutations';\nimport { useMutation } from '@apollo/client';\n\n// Custom styles \nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"flex\",\n        alignItems: 'center'\n    },\n    urLInput: {\n        margin: theme.spacing(1),\n    },\n    addSongButton: {\n        margin: theme.spacing(1),\n    },\n    dialog: {\n        textAlign: 'center'\n    },\n    thumbnail: {\n        width: '90%'\n    }\n\n}))\n\nconst DEFAULT_SONG = {\n    duration: 0,\n    title: \"\",\n    artist: \"\",\n    thumbnail: \"\"\n}\n\nfunction AddSong() {\n    const [url, setUrl] = useState('');\n    // Distract a 2 value 'error data' from useMutation, now it's available for everything within return\n    const [addSong, { error }] = useMutation(ADD_SONG);\n    const [playable, setPlayable] = useState(false);\n    const classes = useStyles();\n    const [dialog, setDialog] = useState(false);\n    const [song, setSong] = useState(DEFAULT_SONG);\n\n    // Returns error object where more info about error and validation\n    // console.dir(error);\n\n    useEffect(() => {\n        const isPlayable = SoundcloudPlayer.canPlay(url) || YoutubePlayer.canPlay(url);\n\n        setPlayable(isPlayable);\n    }, [url])\n\n\n    // Open dialog\n    function handleDialog(e) {\n        e.preventDefault();\n        setDialog(true);\n    }\n\n    function handleUrlChange(e) {\n        setUrl(e.target.value);\n    }\n\n    // Close dialog\n    function handleCloseDialog() {\n        setDialog(false);\n    }\n\n    async function handleEditSong({ player }) {\n        const nestedPlayer = player.player.player;\n        let songData;\n\n        if (nestedPlayer.getVideoData) {\n            songData = getYouTubeInfo(nestedPlayer);\n        } else if (nestedPlayer.getCurrentSound) {\n            songData = await getSoundCloudInfo(nestedPlayer);\n        }\n\n        setSong({ ...songData, url });\n\n    }\n\n    function getYouTubeInfo(player) {\n        const duration = player.getDuration();\n        const { title, video_id, author } = player.getVideoData();\n        const thumbnail = `http://img.youtube.com/vi/${video_id}/0.jpg`;\n\n        return {\n            duration,\n            title,\n            artist: author,\n            thumbnail\n        }\n    }\n\n    function getSoundCloudInfo(player) {\n        return new Promise(resolve => {\n            player.getCurrentSound(songData => {\n                if (songData) {\n                    resolve({\n                        duration: Number(songData.duration / 1000),\n                        title: songData.title,\n                        artist: songData.user.username,\n                        thumbnail: songData.artwork_url.replace('-large', '-t500x500')\n                    })\n                }\n            });\n        })\n    }\n\n    async function handleAddSong() {\n        try {\n            //  addSong({ variables: { ...song } })\n            const { url, duration, title, artist, thumbnail } = song;\n            // addSong returns a  promise\n            await addSong({\n                variables: {\n                    url: url.length > 0 ? url : null, //check if properties aren't empty\n                    title: title.length > 0 ? title : null,\n                    artist: artist.length > 0 ? artist : null,\n                    thumbnail: thumbnail.length > 0 ? thumbnail : null,\n                    duration: duration > 0 ? duration : null\n                }\n            })\n\n            // When song is added: \n            //1. Close dialog\n            //2. Clear dialog and url\n            handleCloseDialog();\n            setSong(DEFAULT_SONG);\n            setUrl(\"\");\n        } catch (error) {\n            console.error(\"Error adding song\", error); // hasura throwing an error/ graphQL related error\n\n        }\n\n\n    }\n\n\n    function handleError(field){\n        // Only if an error then I want to return computed graphQL value\n        // return error && error.graphQLErrors[0].extensions.path.includes(field);\n        return error?.graphQLErrors[0]?.extensions?.path.includes(field);\n    }\n\n    function handleChangeSong(e) {\n        const { name, value } = e.target;\n        setSong(prevSong => ({\n            ...prevSong,\n            [name]: value\n        }))\n    }\n\n    const { title, artist, thumbnail } = song;\n\n    return (\n        <div className={classes.container}>\n            <Dialog\n                className={classes.dialog}\n                open={dialog}\n                onClose={handleCloseDialog}\n            >\n                <DialogTitle>Edit Song</DialogTitle>\n                <DialogContent>\n                    <img\n                        src={thumbnail}\n                        alt=\"Song thumbnail\"\n                        className={classes.thumbnail}\n                    />\n                    <TextField\n                        onChange={handleChangeSong}\n                        margin=\"dense\"\n                        name=\"title\"\n                        label=\"Title\"\n                        value={title}\n                        fullWidth\n                        error={handleError('title')}\n                        helperText={handleError('title') && \"Fill out field\"}\n                    />\n                    <TextField\n                        onChange={handleChangeSong}\n                        margin=\"dense\"\n                        name=\"artist\"\n                        label=\"Artist\"\n                        value={artist}\n                        fullWidth\n                        error={handleError('artist')}\n                        helperText={handleError('artist') && \"Fill out field\"}\n                    />\n                    <TextField\n                        onChange={handleChangeSong}\n                        margin=\"dense\"\n                        name=\"thumbnail\"\n                        label=\"Thumbnail\"\n                        value={thumbnail}\n                        fullWidth\n                        error={handleError('thumbnail')}\n                        helperText={handleError('thumbnail') && \"Fill out field\"}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={handleCloseDialog}\n                        color=\"secondary\"\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={handleAddSong}\n                    >\n                        Add Song\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <TextField\n                className={classes.urLInput}\n                onChange={handleUrlChange}\n                value={url}\n                placeholder=\"Add Youtube or Soundcloud url\"\n                fullWidth\n                margin=\"normal\"\n                type=\"url\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                            <Link />\n                        </InputAdornment>\n                    )\n                }}\n            />\n            <Button\n                // If the song isn't playable disable button\n                disabled={!playable}\n                className={classes.addSongButton}\n                onClick={handleDialog}\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<AddBoxOutlined />}\n            >\n                Add\n            </Button>\n            <ReactPlayer url={url} hidden onReady={handleEditSong} />\n        </div>\n    )\n}\n\nexport default AddSong;","function songReducer(state, action) {\n    switch (action.type) {\n        case \"PLAY_SONG\":\n            return { ...state, isPlaying: true }\n        case \"PAUSE_SONG\":\n            return { ...state, isPlaying: false }\n        case \"SET_SONG\":\n            return {\n                ...state,\n                //replace song with a new song\n                song: action.payload.song,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default songReducer;","import React, { useContext } from 'react';\nimport Header from './components/Header';\nimport SongPlayer from './components/SongPlayer';\nimport SongList from './components/SongList';\nimport AddSong from './components/AddSong';\nimport { Grid, useMediaQuery, Hidden } from '@material-ui/core';\nimport songReducer from './reducer';\n\n// Hide elements without conditions, using Hidden component\n// Wrap component in a Hidden comp and specify on it at what breakpoint I want to be hidden on\n\n\nexport const SongContext = React.createContext({\n  song: {\n    id: \"3561c605-d486-44cb-9bba-d1beeb641778\",\n    title: \"LUNE\",\n    artist: \"MOON\",\n    thumbnail: \"https://picsum.photos/id/237/100/100\",\n    duration: 250,\n    url: \"https://music.youtube.com/watch?v=--ZtUFsIgMk&feature=share\"\n  },\n  isPlaying: false\n});\n\nSongContext.displayName = \"SongContext\";\n\n\nfunction App() {\n\n  const initialSongState = React.useContext(SongContext);\n\n  const [state, dispatch] = React.useReducer(songReducer, initialSongState);\n\n  // Media query breakpoint, hook comes from material-ui library\n  // If min-width === 600px ? true : false \n  // const matches = useMediaQuery('(min-width: 600px)');\n\n  // I can use the theme data as well as its built-in values to set specific breakpoints (down, up)\n  const greaterThanSM = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  const greaterThanMd = useMediaQuery(theme => theme.breakpoints.up('md'));\n\n  /* {greaterThanSM && <Header />} */\n  return (\n    <SongContext.Provider value={{ state, dispatch }} >\n      {/* <Hidden only=\"xs\">\n        <Header />\n      </Hidden> */}\n      <Grid container spacing={3}>\n        <Grid style={\n          {\n            paddingTop: greaterThanSM ? 80 : 10\n          }\n        } item xs={12} md={7}>\n          <AddSong />\n          <SongList />\n        </Grid>\n        <Grid\n          style={\n            greaterThanMd\n              ?\n              {\n                position: 'fixed',\n                width: '100%',\n                top: 70,\n                right: 0\n              }\n              : {\n                position: 'fixed',\n                width: '100%',\n                left: 0,\n                bottom: 0\n              }\n          }\n          item\n          xs={12}\n          md={5}>\n          <SongPlayer />\n        </Grid>\n      </Grid>\n    </SongContext.Provider>\n  )\n}\n\n\nexport default App;\n\n// Create a new GraphQL app [apollo music share] => deploy\n// ","import { createMuiTheme } from '@material-ui/core';\nimport { teal, purple } from '@material-ui/core/colors';\nimport { dark } from '@material-ui/core/styles/createPalette';\n\n//To make theme available for each react component will use react context hook\n\nconst theme = createMuiTheme({\n    palette: {\n        // In addition type property sets light/dark theme\n        type: \"dark\",\n        primary: teal,\n        secondary: purple\n    }\n})\n\nexport default theme;","import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport { WebSocketLink } from 'apollo-link-ws';\n\n// Mutation enables to add/remove items from the queue\n// TypeDefs(type definitions) property tells Apollo client about state I want to manage/ it creates a schema to tell apollo what I want to be querying, data itself, structure of data  and  mutations\n\n\n//Instead of type Song create a custom type \"input\" object that collects all of the individual arguments that I normally pass to mutation\n\nconst client = new ApolloClient({\n    link: new WebSocketLink({\n\n        uri: 'wss://welcome-chipmunk-46.hasura.app/v1/graphql',\n        options: {\n            reconnect: true,\n        }\n    }),\n    cache: new InMemoryCache(),\n    typeDefs: gql`\n    type Song {\n        id: uuid!,\n        title: String!,\n        artist: String!,\n        thumbnail: String!,\n        duration: Float!,\n        ulr: String!\n    }\n\n    input SongInput {\n        id: uuid!,\n        title: String!,\n        artist: String!,\n        thumbnail: String!,\n        duration: Float!,\n        ulr: String!\n    }\n\n    type Query {\n        queue: [Song]!,\n    }\n\n    type Mutation {\n        addOrRemoveFromQueue(input: SongInput): [Song]!\n    }\n    `\n});\n\n\nclient.writeQuery({\n    query: gql`\n      query GetQueue {\n        queue\n      }\n    `,\n    data: {\n        queue: []\n    }\n});\n\n\n\n// const client = new ApolloClient({\n//     uri: 'https://welcome-chipmunk-46.hasura.app/v1/graphql',\n//     cache: new InMemoryCache()\n// });\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core';\nimport theme from './theme';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './graphQL/client';\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline enables to have dark theme */}\n        <CssBaseline />\n        <App />\n      </MuiThemeProvider>\n    </React.StrictMode >\n  </ApolloProvider>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}