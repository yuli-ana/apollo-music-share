{"version":3,"sources":["components/Header.js","graphQL/queries.js","graphQL/mutations.js","components/QueuedSongList.js","reducer.js","components/SongPlayer.js","graphQL/subscriptions.js","components/SongList.js","components/AddSong.js","App.js","theme.js","graphQL/client.js","index.js"],"names":["makeStyles","theme","title","marginLeft","spacing","Header","GET_QUEUED_SONGS","gql","ADD_OR_REMOVE_FROM_QUEUE","ADD_SONG","useStyles","avatar","width","height","text","textOverflow","overflow","container","display","gridAutoFlow","gridTemplateColumns","gridGap","alignItems","marginTop","songInfoContainer","whiteSpace","QueuedSong","song","artist","thumbnail","classes","useMutation","onCompleted","data","localStorage","setItem","JSON","stringify","addOrRemoveFromQueue","className","Avatar","src","Typography","variant","color","IconButton","onClick","variables","input","__typename","Delete","QueuedSongList","queue","useMediaQuery","breakpoints","up","style","margin","length","map","key","id","songReducer","state","action","type","isPlaying","payload","justifyContent","details","flexDirection","padding","content","flex","controls","paddingLeft","paddingRight","playIcon","SongPlayer","useQuery","reactPlayerRef","useRef","useContext","SongContext","dispatch","useState","played","setPlayed","playedSeconds","setPlayedSeconds","seeking","setSeeking","positionInQueue","setPositionInQueue","useEffect","songIndex","findIndex","console","log","nextSong","Card","CardContent","component","prevSong","SkipPrevious","Pause","PlayArrow","SkipNext","Date","toISOString","substr","Slider","onMouseDown","onMouseUp","current","seekTo","onChange","e","newValue","value","min","max","step","ref","onProgress","url","playing","hidden","CardMedia","image","GET_SONGS","songInfo","objectFit","Song","currentSongPlaying","setCurrentSongPlaying","isSongPlaying","replace","gutterBottom","CardActions","size","Save","SongList","useSubscription","loading","error","CircularProgress","songs","urLInput","addSongButton","dialog","textAlign","DEFAULT_SONG","duration","AddSong","setUrl","addSong","playable","setPlayable","setDialog","setSong","handleCloseDialog","a","player","nestedPlayer","getVideoData","songData","getYouTubeInfo","getCurrentSound","getSoundCloudInfo","getDuration","video_id","author","Promise","resolve","Number","user","username","artwork_url","handleError","field","graphQLErrors","extensions","path","includes","handleChangeSong","target","name","isPlayable","SoundcloudPlayer","canPlay","YoutubePlayer","Dialog","open","onClose","DialogTitle","DialogContent","alt","TextField","label","fullWidth","helperText","DialogActions","Button","placeholder","InputProps","startAdornment","InputAdornment","position","Link","disabled","preventDefault","endIcon","AddBoxOutlined","onReady","React","createContext","displayName","App","initialSongState","useReducer","greaterThanSM","greaterThanMd","Provider","Grid","paddingTop","item","xs","md","top","right","left","bottom","createMuiTheme","palette","primary","teal","secondary","purple","client","ApolloClient","link","WebSocketLink","uri","options","reconnect","cache","InMemoryCache","typeDefs","resolvers","Mutation","_","queryResult","readQuery","query","newQueue","some","filter","writeQuery","hasQueue","Boolean","getItem","parse","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.1c248880.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography, makeStyles } from '@material-ui/core';\nimport HeadsetTwoToneIcon from '@material-ui/icons/HeadsetTwoTone';\n\n// Material UI allows to make a custom hook for each of our components, it will make it easy to pass own custom styles throughout the app\n\n//makestyles function - holds all of the individual styles that I have for each part of the component\n\n\n// Accepts an object\nconst useStyles = makeStyles(theme => ({\n    title: {\n        // marginLeft: '8px',\n        marginLeft: theme.spacing(2),\n    }\n}));\n\nfunction Header() {\n    const classes = useStyles();\n\n    return (\n        // Header now has a primary color of teal comes from theme file\n        <AppBar color=\"primary\" position='fixed'>\n            <Toolbar>\n                <HeadsetTwoToneIcon />\n                <Typography className={classes.title} variant=\"h6\" component=\"h1\">\n                    Apollo Music Share\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Header;","import { gql } from '@apollo/client';\n\n// @client annotation tells apollo to perform this query only on the client query\n\n\nexport const GET_QUEUED_SONGS = gql`\nquery getQueuedSongs {\n    queue @client {\n        id\n        duration\n        title\n        artist\n        thumbnail\n        url\n    }\n}\n`;","import { gql } from '@apollo/client';\n\n//Instead of using all individual arguments will bring in an input\n\nexport const ADD_OR_REMOVE_FROM_QUEUE = gql`\nmutation addOrRemoveFromQueue($input: SongInput!){\n  addOrRemoveFromQueue(input: $input) @client\n}\n`;\n\nexport const ADD_SONG = gql`\nmutation addSong($title: String!, $artist: String!, $thumbnail: String!, $duration: Float!, $url: String!) {\n    insert_songs(objects: {url: $url, title: $title, thumbnail: $thumbnail, duration: $duration, artist: $artist}) {\n      affected_rows\n    }\n  }\n`;\n\n// export default ADD_SONG;","import React from 'react';\nimport { Typography, Avatar, IconButton, makeStyles, useMediaQuery } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useMutation } from '@apollo/client';\nimport { GET_QUEUED_SONGS } from '../graphQL/queries';\nimport { ADD_OR_REMOVE_FROM_QUEUE } from '../graphQL/mutations';\n\nfunction QueuedSongList({ queue }) {\n\n    const greaterThanMd = useMediaQuery(theme => theme.breakpoints.up('md'));\n\n    return greaterThanMd && (\n        <div style={{ margin: '10px 0' }}>\n            <Typography color=\"textSecondary\" variant=\"button\">\n                QUEUE ({queue.length})\n            </Typography>\n            {queue.map(song => (\n                <QueuedSong key={song.id} song={song} />\n            ))}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 44,\n        height: 44,\n    },\n    text: {\n        textOverflow: 'ellipsis',\n        overflow: 'hidden'\n    },\n    container: {\n        display: 'grid',\n        gridAutoFlow: 'column',\n        gridTemplateColumns: '50px auto 50px',\n        gridGap: 12,\n        alignItems: 'center',\n        marginTop: 10\n    },\n    songInfoContainer: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n    }\n})\n\n\nfunction QueuedSong({ song }) {\n    const { title, artist, thumbnail } = song;\n    const classes = useStyles();\n    const [addOrRemoveFromQueue] = useMutation(ADD_OR_REMOVE_FROM_QUEUE, {\n        onCompleted: data => {\n            localStorage.setItem(\"queue\", JSON.stringify(data.addOrRemoveFromQueue))\n        }\n    });\n\n\n    function handleAddOrRemoveFromQueue() {\n        // __typename field which provides the name of the type we're working with\n        addOrRemoveFromQueue({\n            variables: { input: { ...song, __typename: \"Song\" } },\n        })\n    }\n\n    return (\n        <div className={classes.container}>\n            <Avatar src={thumbnail} className={classes.avatar} />\n            <div className={classes.songInfoContainer}>\n                <Typography className={classes.text} variant=\"subtitle2\">\n                    {title}\n                </Typography>\n                <Typography className={classes.text} color=\"textSecondary\" variant=\"body2\">\n                    {artist}\n                </Typography>\n            </div>\n            <IconButton onClick={handleAddOrRemoveFromQueue} >\n                <Delete color=\"error\" />\n            </IconButton>\n        </div>\n    );\n\n}\n\nexport default QueuedSongList;\n","function songReducer(state, action) {\n    switch (action.type) {\n        case \"PLAY_SONG\":\n            return { ...state, isPlaying: true }\n        case \"PAUSE_SONG\":\n            return { ...state, isPlaying: false }\n        case \"SET_SONG\":\n            return {\n                ...state,\n                //replace song with a new song\n                song: action.payload.song,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default songReducer;","import React, { useContext, useState, useRef, useEffect } from 'react';\nimport QueuedSongList from './QueuedSongList';\nimport { Card, CardContent, Typography, IconButton, Slider, CardMedia, makeStyles } from '@material-ui/core';\nimport { SkipPrevious, PlayArrow, SkipNext, Pause } from '@material-ui/icons';\nimport { SongContext } from '../App';\nimport { useQuery } from '@apollo/client';\nimport { GET_QUEUED_SONGS } from '../graphQL/queries';\nimport ReactPlayer from 'react-player';\nimport songReducer from '../reducer';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    details: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '0px 15px',\n    },\n    content: {\n        flex: '1 0 auto',\n    },\n    thumbnail: {\n        width: 150,\n    },\n    controls: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1)\n    },\n    playIcon: {\n        height: 38,\n        width: 38 \n    }\n}))\n\n\nfunction SongPlayer() {\n    const { data } = useQuery(GET_QUEUED_SONGS);\n    const reactPlayerRef = useRef();\n    const { state, dispatch } = useContext(SongContext);\n    const classes = useStyles();\n    const [played, setPlayed] = useState(0);\n    const [playedSeconds, setPlayedSeconds] = useState(0);\n\n    // Keeps track when the user seeking through the song changing the position of the slider\n    const [seeking, setSeeking] = useState(false);\n    const [positionInQueue, setPositionInQueue] = useState(0);\n\n\n    useEffect(() => {\n       const songIndex = data.queue.findIndex(song => song.id === state.song.id)\n\n       setPositionInQueue(songIndex);\n    }, [data.queue, state.song.id])\n\n\n    console.log(data.queue);\n\n    useEffect(() => {\n        const nextSong = data.queue[positionInQueue + 1];\n\n        if( played === 1 && nextSong ){\n            setPlayed(0);\n            dispatch({ type: \"SET_SONG\", payload: { song: nextSong }})\n        }\n\n     }, [data.queue, played, dispatch, positionInQueue]);\n\n    function handleTogglePlay() {\n        // Toggle state\n        dispatch(state.isPlaying ? { type: \"PAUSE_SONG\" } : { type: \"PLAY_SONG\" })\n    }\n\n    function handleSeekMouseDown(){\n        setSeeking(true);\n    }\n    \n    function handleSeekMouseUp(){\n        setSeeking(false);\n        reactPlayerRef.current.seekTo(played);\n    }\n\n    function handleProgressChange(e, newValue){\n        setPlayed(newValue);\n    }\n\n    function formatDuration(seconds){\n        return new Date(seconds * 1000).toISOString().substr(11, 8);\n    }\n\n    function handlePlayNextSong(){\n        const nextSong = data.queue[positionInQueue + 1];\n\n        if(nextSong){\n            dispatch({ type: \"SET_SONG\", payload: { song: nextSong } })\n        }\n    }\n\n    function handlePlayPrevSong(){\n        const prevSong = data.queue[positionInQueue - 1];\n\n        // Check if it exists\n        if(prevSong){\n            dispatch({ type: \"SET_SONG\", payload: { song: prevSong } })\n        }\n    }\n\n\n\n    return (\n        <>\n            <Card variant=\"outlined\" className={classes.container}>\n                <div className={classes.details}>\n                    <CardContent className={classes.content}>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            {state.song.title}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\">\n                            {state.song.title}\n                        </Typography>\n                    </CardContent>\n                    <div className={classes.controls}>\n                        <IconButton onClick={handlePlayPrevSong}>\n                            <SkipPrevious />\n                        </IconButton>\n                        <IconButton onClick={handleTogglePlay}>\n                            {/* Toggle icons */}\n                            {state.isPlaying ? <Pause className={classes.playIcon} /> : <PlayArrow className={classes.playIcon} />}\n                        </IconButton>\n                        <IconButton onClick={handlePlayNextSong}>\n                            <SkipNext />\n                        </IconButton>\n                        <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\">\n                            {formatDuration(playedSeconds)}\n                        </Typography>\n                    </div>\n                    {/* Now slider is controlled by a state , I can't move it*/}\n                    <Slider\n                    // Starts seeking\n                        onMouseDown={handleSeekMouseDown}\n                    // Done seeking\n                        onMouseUp={handleSeekMouseUp}\n                        onChange={handleProgressChange}\n                        value={played}\n                        type=\"range\"\n                        min={0}\n                        max={1}\n                        step={0.01}\n                    />\n                </div>\n                <ReactPlayer \n                    ref={reactPlayerRef}\n                    onProgress = {({ played, playedSeconds }) => {\n                        if( !seeking ) {\n                        setPlayed(played);\n                        setPlayedSeconds(playedSeconds);\n                        }\n                    }}\n                    url={state.song.url} \n                    playing={state.isPlaying} \n                    hidden />\n                <CardMedia\n                    className={classes.thumbnail}\n                    image={state.song.thumbnail}\n                />\n            </Card>\n            <QueuedSongList queue={data.queue} />\n        </>\n    )\n}\n\nexport default SongPlayer;\n\n// React player ((onProgress callback))\n// { played, playedSeconds }  - played show users the song progress","import { gql } from '@apollo/client';\n\nexport const GET_SONGS = gql`\nsubscription getSongs {\n    songs(order_by: {created_at: desc}){\n        artist\n        duration\n        id\n        thumbnail\n        title\n        url\n    }\n  }\n`;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  CircularProgress,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n  CardActions,\n  IconButton,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { PlayArrow, Save, Pause } from \"@material-ui/icons\";\nimport { useSubscription, useMutation } from \"@apollo/client\";\nimport { GET_SONGS } from \"../graphQL/subscriptions\";\nimport { SongContext } from \"../App\";\nimport { ADD_OR_REMOVE_FROM_QUEUE } from \"../graphQL/mutations\";\n\nfunction SongList() {\n  // Remove loading variable instead use hook useQuery\n  // let loading = false;\n\n  const { data, loading, error } = useSubscription(GET_SONGS);\n\n  // If true show loading spinner\n  if (loading) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          marginTop: 50,\n        }}\n      >\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) return <div>Error fetching songs</div>;\n\n  return (\n    <div>\n      {data.songs.map((song) => (\n        <Song key={song.id} song={song} />\n      ))}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(),\n  },\n  songInfoContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  songInfo: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  thumbnail: {\n    objectFit: \"cover\",\n    width: 140,\n    height: 140,\n  },\n}));\n\nfunction Song({ song }) {\n  const { title, artist, thumbnail, id } = song;\n  const [currentSongPlaying, setCurrentSongPlaying] = useState(false);\n  const { state, dispatch } = useContext(SongContext);\n  const [addOrRemoveFromQueue] = useMutation(ADD_OR_REMOVE_FROM_QUEUE, {\n    onCompleted: (data) => {\n      localStorage.setItem(\"queue\", JSON.stringify(data.addOrRemoveFromQueue));\n    },\n  });\n\n  useEffect(() => {\n    const isSongPlaying = state.isPlaying && id === state.song.id;\n    setCurrentSongPlaying(isSongPlaying);\n  }, [id, state.isPlaying, state.song.id]);\n\n  const classes = useStyles();\n\n  function handleTogglePlay() {\n    dispatch({ type: \"SET_SONG\", payload: { song } });\n\n    dispatch(state.isPlaying ? { type: \"PAUSE_SONG\" } : { type: \"PLAY_SONG\" });\n  }\n\n  function handleAddOrRemoveFromQueue() {\n    // __typename field which provides the name of the type we're working with\n    addOrRemoveFromQueue({\n      variables: { input: { ...song, __typename: \"Song\" } },\n    });\n  }\n\n  return (\n    <Card className={classes.container}>\n      <div className={classes.songInfoContainer}>\n        <CardMedia\n          className={classes.thumbnail}\n          image={thumbnail.replace(\"http\", \"https\")}\n        />\n        <div className={classes.songInfo}>\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {title}\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n              {artist}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <IconButton onClick={handleTogglePlay} size=\"small\" color=\"primary\">\n              {currentSongPlaying ? <Pause /> : <PlayArrow />}\n            </IconButton>\n            <IconButton\n              onClick={handleAddOrRemoveFromQueue}\n              size=\"small\"\n              color=\"secondary\"\n            >\n              <Save color=\"secondary\" />\n            </IconButton>\n          </CardActions>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default SongList;\n","import React, { useState, useEffect } from 'react';\nimport QueuedSongList from './QueuedSongList';\nimport {\n    TextField,\n    InputAdornment,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    makeStyles,\n    duration\n} from '@material-ui/core';\nimport { Link, AddBoxOutlined } from '@material-ui/icons';\nimport SoundcloudPlayer from 'react-player/lib/players/SoundCloud';\nimport YoutubePlayer from 'react-player/lib/players/YouTube';\nimport ReactPlayer from 'react-player';\nimport { ADD_SONG } from '../graphQL/mutations';\nimport { useMutation } from '@apollo/client';\n\n// Custom styles \nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"flex\",\n        alignItems: 'center'\n    },\n    urLInput: {\n        margin: theme.spacing(1),\n    },\n    addSongButton: {\n        margin: theme.spacing(1),\n    },\n    dialog: {\n        textAlign: 'center'\n    },\n    thumbnail: {\n        width: '90%'\n    }\n\n}))\n\nconst DEFAULT_SONG = {\n    duration: 0,\n    title: \"\",\n    artist: \"\",\n    thumbnail: \"\"\n}\n\nfunction AddSong() {\n    const [url, setUrl] = useState('');\n    // Distract a 2 value 'error data' from useMutation, now it's available for everything within return\n    const [addSong, { error }] = useMutation(ADD_SONG);\n    const [playable, setPlayable] = useState(false);\n    const classes = useStyles();\n    const [dialog, setDialog] = useState(false);\n    const [song, setSong] = useState(DEFAULT_SONG);\n\n    // Returns error object where more info about error and validation\n    // console.dir(error);\n\n    useEffect(() => {\n        const isPlayable = SoundcloudPlayer.canPlay(url) || YoutubePlayer.canPlay(url);\n\n        setPlayable(isPlayable);\n    }, [url])\n\n\n    // Open dialog\n    function handleDialog(e) {\n        e.preventDefault();\n        setDialog(true);\n    }\n\n    function handleUrlChange(e) {\n        setUrl(e.target.value);\n    }\n\n    // Close dialog\n    function handleCloseDialog() {\n        setDialog(false);\n    }\n\n    async function handleEditSong({ player }) {\n        const nestedPlayer = player.player.player;\n        let songData;\n\n        if (nestedPlayer.getVideoData) {\n            songData = getYouTubeInfo(nestedPlayer);\n        } else if (nestedPlayer.getCurrentSound) {\n            songData = await getSoundCloudInfo(nestedPlayer);\n        }\n\n        setSong({ ...songData, url });\n\n    }\n\n    function getYouTubeInfo(player) {\n        const duration = player.getDuration();\n        const { title, video_id, author } = player.getVideoData();\n        const thumbnail = `http://img.youtube.com/vi/${video_id}/0.jpg`;\n\n        return {\n            duration,\n            title,\n            artist: author,\n            thumbnail\n        }\n    }\n\n    function getSoundCloudInfo(player) {\n        return new Promise(resolve => {\n            player.getCurrentSound(songData => {\n                if (songData) {\n                    resolve({\n                        duration: Number(songData.duration / 1000),\n                        title: songData.title,\n                        artist: songData.user.username,\n                        thumbnail: songData.artwork_url.replace('-large', '-t500x500')\n                    })\n                }\n            });\n        })\n    }\n\n    async function handleAddSong() {\n        try {\n            //  addSong({ variables: { ...song } })\n            const { url, duration, title, artist, thumbnail } = song;\n            // addSong returns a  promise\n            await addSong({\n                variables: {\n                    url: url.length > 0 ? url : null, //check if properties aren't empty\n                    title: title.length > 0 ? title : null,\n                    artist: artist.length > 0 ? artist : null,\n                    thumbnail: thumbnail.length > 0 ? thumbnail : null,\n                    duration: duration > 0 ? duration : null\n                }\n            })\n\n            // When song is added: \n            //1. Close dialog\n            //2. Clear dialog and url\n            handleCloseDialog();\n            setSong(DEFAULT_SONG);\n            setUrl(\"\");\n        } catch (error) {\n            console.error(\"Error adding song\", error); // hasura throwing an error/ graphQL related error\n\n        }\n\n\n    }\n\n\n    function handleError(field) {\n        // Only if an error then I want to return computed graphQL value\n        // return error && error.graphQLErrors[0].extensions.path.includes(field);\n        return error?.graphQLErrors[0]?.extensions?.path.includes(field);\n    }\n\n    function handleChangeSong(e) {\n        const { name, value } = e.target;\n        setSong(prevSong => ({\n            ...prevSong,\n            [name]: value\n        }))\n    }\n\n    const { title, artist, thumbnail } = song;\n\n    return (\n        <div className={classes.container}>\n            <Dialog\n                className={classes.dialog}\n                open={dialog}\n                onClose={handleCloseDialog}\n            >\n                <DialogTitle>Edit Song</DialogTitle>\n                <DialogContent>\n                    <img\n                        src={thumbnail}\n                        alt=\"Song thumbnail\"\n                        className={classes.thumbnail}\n                    />\n                    <TextField\n                        onChange={handleChangeSong}\n                        margin=\"dense\"\n                        name=\"title\"\n                        label=\"Title\"\n                        value={title}\n                        fullWidth\n                        error={handleError('title')}\n                        helperText={handleError('title') && \"Fill out field\"}\n                    />\n                    <TextField\n                        onChange={handleChangeSong}\n                        margin=\"dense\"\n                        name=\"artist\"\n                        label=\"Artist\"\n                        value={artist}\n                        fullWidth\n                        error={handleError('artist')}\n                        helperText={handleError('artist') && \"Fill out field\"}\n                    />\n                    <TextField\n                        onChange={handleChangeSong}\n                        margin=\"dense\"\n                        name=\"thumbnail\"\n                        label=\"Thumbnail\"\n                        value={thumbnail}\n                        fullWidth\n                        error={handleError('thumbnail')}\n                        helperText={handleError('thumbnail') && \"Fill out field\"}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={handleCloseDialog}\n                        color=\"secondary\"\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={handleAddSong}\n                    >\n                        Add Song\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <TextField\n                className={classes.urLInput}\n                onChange={handleUrlChange}\n                value={url}\n                placeholder=\"Add Youtube or Soundcloud url\"\n                fullWidth\n                margin=\"normal\"\n                type=\"url\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                            <Link />\n                        </InputAdornment>\n                    )\n                }}\n            />\n            <Button\n                // If the song isn't playable disable button\n                disabled={!playable}\n                className={classes.addSongButton}\n                onClick={handleDialog}\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<AddBoxOutlined />}\n            >\n                Add\n            </Button>\n            <ReactPlayer url={url} hidden onReady={handleEditSong} />\n        </div>\n    )\n}\n\nexport default AddSong;","import React, { useContext } from 'react';\nimport Header from './components/Header';\nimport SongPlayer from './components/SongPlayer';\nimport SongList from './components/SongList';\nimport AddSong from './components/AddSong';\nimport { Grid, useMediaQuery, Hidden } from '@material-ui/core';\nimport songReducer from './reducer';\n\n// Hide elements without conditions, using Hidden component\n// Wrap component in a Hidden comp and specify on it at what breakpoint I want to be hidden on\n\n\nexport const SongContext = React.createContext({\n  song: {\n    id: \"3561c605-d486-44cb-9bba-d1beeb641778\",\n    title: \"LUNE\",\n    artist: \"MOON\",\n    thumbnail: \"https://picsum.photos/id/237/100/100\",\n    duration: 250,\n    url: \"https://music.youtube.com/watch?v=--ZtUFsIgMk&feature=share\"\n  },\n  isPlaying: false\n});\n\nSongContext.displayName = \"SongContext\";\n\n\nfunction App() {\n\n  const initialSongState = React.useContext(SongContext);\n\n  const [state, dispatch] = React.useReducer(songReducer, initialSongState);\n\n  // Media query breakpoint, hook comes from material-ui library\n  // If min-width === 600px ? true : false \n  // const matches = useMediaQuery('(min-width: 600px)');\n\n  // I can use the theme data as well as its built-in values to set specific breakpoints (down, up)\n  const greaterThanSM = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n  const greaterThanMd = useMediaQuery(theme => theme.breakpoints.up('md'));\n\n  /* {greaterThanSM && <Header />} */\n  return (\n    <SongContext.Provider value={{ state, dispatch }} >\n      {/* <Hidden only=\"xs\">\n        <Header />\n      </Hidden> */}\n      <Grid container spacing={3}>\n        <Grid style={\n          {\n            paddingTop: greaterThanSM ? 80 : 10\n          }\n        } item xs={12} md={7}>\n          <AddSong />\n          <SongList />\n        </Grid>\n        <Grid\n          style={\n            greaterThanMd\n              ?\n              {\n                position: 'fixed',\n                width: '100%',\n                top: 70,\n                right: 0\n              }\n              : {\n                position: 'fixed',\n                width: '100%',\n                left: 0,\n                bottom: 0\n              }\n          }\n          item\n          xs={12}\n          md={5}>\n          <SongPlayer />\n        </Grid>\n      </Grid>\n    </SongContext.Provider>\n  )\n}\n\n\nexport default App;\n\n// Create a new GraphQL app [apollo music share] => deploy\n// ","import { createMuiTheme } from '@material-ui/core';\nimport { teal, purple } from '@material-ui/core/colors';\nimport { dark } from '@material-ui/core/styles/createPalette';\n\n//To make theme available for each react component will use react context hook\n\nconst theme = createMuiTheme({\n    palette: {\n        // In addition type property sets light/dark theme\n        type: \"dark\",\n        primary: teal,\n        secondary: purple\n    }\n})\n\nexport default theme;","import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { GET_QUEUED_SONGS } from './queries';\n\n// Mutation enables to add/remove items from the queue\n// TypeDefs(type definition) property tells Apollo client about state I want to manage/ it creates a schema to tell apollo what I want to be querying, data itself, structure of data  and  mutations\n\n\n//Instead of type Song create a custom type \"input\" object that collects all of the individual arguments that I normally pass to mutation \n\nconst client = new ApolloClient({\n    link: new WebSocketLink({\n        uri: 'wss://welcome-chipmunk-46.hasura.app/v1/graphql',\n        options: {\n            reconnect: true,\n        }\n    }),\n    cache: new InMemoryCache(),\n    // Defined: what song data gonna consist of, how to query data and how to make changes to it\n\n    // GraphQL schema defines what types of data a client can read and write to my data graph\n    typeDefs: gql`\n    type Song {\n        id: uuid!,\n        title: String!,\n        artist: String!,\n        thumbnail: String!,\n        duration: Float!,\n        ulr: String!\n    }\n\n    input SongInput {\n        id: uuid!,\n        title: String!,\n        artist: String!,\n        thumbnail: String!,\n        duration: Float!,\n        ulr: String!\n    }\n\n    type Query {\n        queue: [Song]!,\n    }\n\n    type Mutation {\n        addOrRemoveFromQueue(input: SongInput): [Song]!\n    }\n    `,\n\n    resolvers: {\n        Mutation: {\n            addOrRemoveFromQueue: (_, { input }, { cache }) => {\n                // Read query\n                const queryResult = cache.readQuery({\n                    query: GET_QUEUED_SONGS\n                })\n\n                // Manage, update data\n                if (queryResult) {\n                    const { queue } = queryResult;\n                    const isInQueue = queue.some(song => song.id === input.id);\n\n                    const newQueue = isInQueue ?\n                        queue.filter(song => song.id !== input.id)\n                        : [...queue, input];\n\n                    // Write back to the query that we read from\n\n                    cache.writeQuery({\n                        query: GET_QUEUED_SONGS,\n                        data: {\n                            queue: newQueue,\n                        }\n                    })\n\n                    return newQueue;\n                }\n                return [];\n            }\n        }\n    }\n});\n\n// Our app reloads and: \n// Queued items taken from localStorage\n// Put in our cache\n// And queried using a local query\n// And put in our queued songList component\n\n\nconst hasQueue = Boolean(localStorage.getItem(\"queue\"));\n\n// Writing this to a client (to the cache)\nclient.writeQuery({\n    query: gql`\n      query GetQueue {\n        queue\n      }\n    `,\n    data: {\n        queue: hasQueue ? JSON.parse(localStorage.getItem(\"queue\")) : [],\n    }\n});\n\n\n\n// const client = new ApolloClient({\n//     uri: 'https://welcome-chipmunk-46.hasura.app/v1/graphql',\n//     cache: new InMemoryCache()\n// });\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core';\nimport theme from './theme';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './graphQL/client';\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline enables to have dark theme */}\n        <CssBaseline />\n        <App />\n      </MuiThemeProvider>\n    </React.StrictMode >\n  </ApolloProvider>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}